# coding: utf-8

"""
    elepay API リファレンス

    elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。   # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ChargeReq(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'int',
        'currency': 'str',
        'payment_method': 'PaymentMethodType',
        'order_no': 'str',
        'description': 'str',
        'extra': 'dict(str, object)',
        'metadata': 'dict(str, object)',
        'client_ip': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'currency': 'currency',
        'payment_method': 'paymentMethod',
        'order_no': 'orderNo',
        'description': 'description',
        'extra': 'extra',
        'metadata': 'metadata',
        'client_ip': 'clientIp'
    }

    def __init__(self, amount=None, currency='JPY', payment_method=None, order_no=None, description=None, extra=None, metadata=None, client_ip=None):  # noqa: E501
        """ChargeReq - a model defined in OpenAPI"""  # noqa: E501

        self._amount = None
        self._currency = None
        self._payment_method = None
        self._order_no = None
        self._description = None
        self._extra = None
        self._metadata = None
        self._client_ip = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if payment_method is not None:
            self.payment_method = payment_method
        if order_no is not None:
            self.order_no = order_no
        if description is not None:
            self.description = description
        if extra is not None:
            self.extra = extra
        if metadata is not None:
            self.metadata = metadata
        if client_ip is not None:
            self.client_ip = client_ip

    @property
    def amount(self):
        """Gets the amount of this ChargeReq.  # noqa: E501

        金額  # noqa: E501

        :return: The amount of this ChargeReq.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ChargeReq.

        金額  # noqa: E501

        :param amount: The amount of this ChargeReq.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this ChargeReq.  # noqa: E501

        通貨コード (ISO_4217)  # noqa: E501

        :return: The currency of this ChargeReq.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ChargeReq.

        通貨コード (ISO_4217)  # noqa: E501

        :param currency: The currency of this ChargeReq.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def payment_method(self):
        """Gets the payment_method of this ChargeReq.  # noqa: E501


        :return: The payment_method of this ChargeReq.  # noqa: E501
        :rtype: PaymentMethodType
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this ChargeReq.


        :param payment_method: The payment_method of this ChargeReq.  # noqa: E501
        :type: PaymentMethodType
        """

        self._payment_method = payment_method

    @property
    def order_no(self):
        """Gets the order_no of this ChargeReq.  # noqa: E501

        お客様側のシステムオーダーNo（例：注文番号、決済IDなど）  # noqa: E501

        :return: The order_no of this ChargeReq.  # noqa: E501
        :rtype: str
        """
        return self._order_no

    @order_no.setter
    def order_no(self, order_no):
        """Sets the order_no of this ChargeReq.

        お客様側のシステムオーダーNo（例：注文番号、決済IDなど）  # noqa: E501

        :param order_no: The order_no of this ChargeReq.  # noqa: E501
        :type: str
        """

        self._order_no = order_no

    @property
    def description(self):
        """Gets the description of this ChargeReq.  # noqa: E501

        決済に関する説明  # noqa: E501

        :return: The description of this ChargeReq.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChargeReq.

        決済に関する説明  # noqa: E501

        :param description: The description of this ChargeReq.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def extra(self):
        """Gets the extra of this ChargeReq.  # noqa: E501

        決済に関する追加情報がある場合に利用します。  # noqa: E501

        :return: The extra of this ChargeReq.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this ChargeReq.

        決済に関する追加情報がある場合に利用します。  # noqa: E501

        :param extra: The extra of this ChargeReq.  # noqa: E501
        :type: dict(str, object)
        """

        self._extra = extra

    @property
    def metadata(self):
        """Gets the metadata of this ChargeReq.  # noqa: E501

        メタデータ  # noqa: E501

        :return: The metadata of this ChargeReq.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ChargeReq.

        メタデータ  # noqa: E501

        :param metadata: The metadata of this ChargeReq.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def client_ip(self):
        """Gets the client_ip of this ChargeReq.  # noqa: E501

        Client IP アドレス  # noqa: E501

        :return: The client_ip of this ChargeReq.  # noqa: E501
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip):
        """Sets the client_ip of this ChargeReq.

        Client IP アドレス  # noqa: E501

        :param client_ip: The client_ip of this ChargeReq.  # noqa: E501
        :type: str
        """

        self._client_ip = client_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargeReq):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
