# coding: utf-8

"""
    elepay API リファレンス

    elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。   # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RefundDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'object': 'str',
        'charge_id': 'str',
        'live_mode': 'bool',
        'amount': 'int',
        'currency': 'str',
        'reason': 'str',
        'status': 'str',
        'refunded_time': 'int',
        'create_time': 'int'
    }

    attribute_map = {
        'id': 'id',
        'object': 'object',
        'charge_id': 'chargeId',
        'live_mode': 'liveMode',
        'amount': 'amount',
        'currency': 'currency',
        'reason': 'reason',
        'status': 'status',
        'refunded_time': 'refundedTime',
        'create_time': 'createTime'
    }

    def __init__(self, id=None, object='refund', charge_id=None, live_mode=None, amount=None, currency=None, reason=None, status=None, refunded_time=None, create_time=None):  # noqa: E501
        """RefundDto - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._object = None
        self._charge_id = None
        self._live_mode = None
        self._amount = None
        self._currency = None
        self._reason = None
        self._status = None
        self._refunded_time = None
        self._create_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if object is not None:
            self.object = object
        if charge_id is not None:
            self.charge_id = charge_id
        if live_mode is not None:
            self.live_mode = live_mode
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if reason is not None:
            self.reason = reason
        if status is not None:
            self.status = status
        if refunded_time is not None:
            self.refunded_time = refunded_time
        if create_time is not None:
            self.create_time = create_time

    @property
    def id(self):
        """Gets the id of this RefundDto.  # noqa: E501

        Refund ID  # noqa: E501

        :return: The id of this RefundDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RefundDto.

        Refund ID  # noqa: E501

        :param id: The id of this RefundDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def object(self):
        """Gets the object of this RefundDto.  # noqa: E501

        対象種類の表記  # noqa: E501

        :return: The object of this RefundDto.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this RefundDto.

        対象種類の表記  # noqa: E501

        :param object: The object of this RefundDto.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def charge_id(self):
        """Gets the charge_id of this RefundDto.  # noqa: E501

        Charge ID  # noqa: E501

        :return: The charge_id of this RefundDto.  # noqa: E501
        :rtype: str
        """
        return self._charge_id

    @charge_id.setter
    def charge_id(self, charge_id):
        """Sets the charge_id of this RefundDto.

        Charge ID  # noqa: E501

        :param charge_id: The charge_id of this RefundDto.  # noqa: E501
        :type: str
        """

        self._charge_id = charge_id

    @property
    def live_mode(self):
        """Gets the live_mode of this RefundDto.  # noqa: E501

        本番モードかどうか - false テストモード - true 本番モード   # noqa: E501

        :return: The live_mode of this RefundDto.  # noqa: E501
        :rtype: bool
        """
        return self._live_mode

    @live_mode.setter
    def live_mode(self, live_mode):
        """Sets the live_mode of this RefundDto.

        本番モードかどうか - false テストモード - true 本番モード   # noqa: E501

        :param live_mode: The live_mode of this RefundDto.  # noqa: E501
        :type: bool
        """

        self._live_mode = live_mode

    @property
    def amount(self):
        """Gets the amount of this RefundDto.  # noqa: E501

        返金金額。全額返金、及び amount を指定することで金額の部分返金を行うことができます。  # noqa: E501

        :return: The amount of this RefundDto.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RefundDto.

        返金金額。全額返金、及び amount を指定することで金額の部分返金を行うことができます。  # noqa: E501

        :param amount: The amount of this RefundDto.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this RefundDto.  # noqa: E501

        通貨コード (ISO_4217)  # noqa: E501

        :return: The currency of this RefundDto.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RefundDto.

        通貨コード (ISO_4217)  # noqa: E501

        :param currency: The currency of this RefundDto.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def reason(self):
        """Gets the reason of this RefundDto.  # noqa: E501

        返金理由  # noqa: E501

        :return: The reason of this RefundDto.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RefundDto.

        返金理由  # noqa: E501

        :param reason: The reason of this RefundDto.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this RefundDto.  # noqa: E501

        返金状態  # noqa: E501

        :return: The status of this RefundDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RefundDto.

        返金状態  # noqa: E501

        :param status: The status of this RefundDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def refunded_time(self):
        """Gets the refunded_time of this RefundDto.  # noqa: E501

        返金を行う時間のUTCタイムスタンプ。  # noqa: E501

        :return: The refunded_time of this RefundDto.  # noqa: E501
        :rtype: int
        """
        return self._refunded_time

    @refunded_time.setter
    def refunded_time(self, refunded_time):
        """Sets the refunded_time of this RefundDto.

        返金を行う時間のUTCタイムスタンプ。  # noqa: E501

        :param refunded_time: The refunded_time of this RefundDto.  # noqa: E501
        :type: int
        """

        self._refunded_time = refunded_time

    @property
    def create_time(self):
        """Gets the create_time of this RefundDto.  # noqa: E501

        返金新規時間のUTCタイムスタンプ。  # noqa: E501

        :return: The create_time of this RefundDto.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this RefundDto.

        返金新規時間のUTCタイムスタンプ。  # noqa: E501

        :param create_time: The create_time of this RefundDto.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefundDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
