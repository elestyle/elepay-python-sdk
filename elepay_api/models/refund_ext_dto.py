# coding: utf-8

"""
    elepay API リファレンス

    elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。   # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RefundExtDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'object': 'str',
        'amount': 'int',
        'total_count': 'int',
        'data': 'list[RefundDto]'
    }

    attribute_map = {
        'object': 'object',
        'amount': 'amount',
        'total_count': 'totalCount',
        'data': 'data'
    }

    def __init__(self, object='refundExt', amount=None, total_count=None, data=None):  # noqa: E501
        """RefundExtDto - a model defined in OpenAPI"""  # noqa: E501

        self._object = None
        self._amount = None
        self._total_count = None
        self._data = None
        self.discriminator = None

        if object is not None:
            self.object = object
        if amount is not None:
            self.amount = amount
        if total_count is not None:
            self.total_count = total_count
        if data is not None:
            self.data = data

    @property
    def object(self):
        """Gets the object of this RefundExtDto.  # noqa: E501

        対象種類の表記  # noqa: E501

        :return: The object of this RefundExtDto.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this RefundExtDto.

        対象種類の表記  # noqa: E501

        :param object: The object of this RefundExtDto.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def amount(self):
        """Gets the amount of this RefundExtDto.  # noqa: E501

        返金総額  # noqa: E501

        :return: The amount of this RefundExtDto.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RefundExtDto.

        返金総額  # noqa: E501

        :param amount: The amount of this RefundExtDto.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def total_count(self):
        """Gets the total_count of this RefundExtDto.  # noqa: E501

        返金回数  # noqa: E501

        :return: The total_count of this RefundExtDto.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this RefundExtDto.

        返金回数  # noqa: E501

        :param total_count: The total_count of this RefundExtDto.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def data(self):
        """Gets the data of this RefundExtDto.  # noqa: E501

        返金詳細情報  # noqa: E501

        :return: The data of this RefundExtDto.  # noqa: E501
        :rtype: list[RefundDto]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RefundExtDto.

        返金詳細情報  # noqa: E501

        :param data: The data of this RefundExtDto.  # noqa: E501
        :type: list[RefundDto]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefundExtDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
