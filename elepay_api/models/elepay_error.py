# coding: utf-8

"""
    elepay API リファレンス

    elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。   # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ElepayError(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'code': 'str',
        'message': 'str'
    }

    attribute_map = {
        'type': 'type',
        'code': 'code',
        'message': 'message'
    }

    def __init__(self, type=None, code=None, message=None):  # noqa: E501
        """ElepayError - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._code = None
        self._message = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if code is not None:
            self.code = code
        if message is not None:
            self.message = message

    @property
    def type(self):
        """Gets the type of this ElepayError.  # noqa: E501

        エラーコードとメッセージ  # noqa: E501

        :return: The type of this ElepayError.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ElepayError.

        エラーコードとメッセージ  # noqa: E501

        :param type: The type of this ElepayError.  # noqa: E501
        :type: str
        """
        allowed_values = ["not_found_error", "invalid_request_error", "channel_validation_error", "channel_error", "provider_error", "connection_error", "process_error", "authentication_error", "forbidden_error", "rate_limit_error", "api_error", "api_connection_error"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def code(self):
        """Gets the code of this ElepayError.  # noqa: E501

        エラーコード  # noqa: E501

        :return: The code of this ElepayError.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ElepayError.

        エラーコード  # noqa: E501

        :param code: The code of this ElepayError.  # noqa: E501
        :type: str
        """
        allowed_values = ["not_found", "not_found_charge", "auth_invalid_credential", "auth_invalid_provider", "invalid_request", "invalid_order_no", "invalid_payment_method", "invalid_amount", "invalid_token", "invalid_front_url", "invalid_cancel_url", "invalid_contract_number", "invalid_username", "invalid_email", "invalid_password", "invalid_order_no_length", "invalid_status_change", "invalid_status_change_by_app", "invalid_status_change_by_provider", "invalid_provider_unique_id", "invalid_provider_capture_id", "invalid_channel_group", "invalid_buyer_name", "invalid_buyer_phone", "invalid_buyer_email", "invalid_buyer_zip", "invalid_buyer_address1", "invalid_buyer_address2", "invalid_code_url", "invalid_shop_id", "invalid_shop_name", "invalid_shop_no", "invalid_product_id", "invalid_product_name", "invalid_product_price", "invalid_product_count", "invalid_setting_type", "invalid_setting_name", "invalid_category_id", "invalid_category_name", "invalid_order_amount", "invalid_order_amount_change", "invalid_product_inactive", "invalid_name", "invalid_role", "invalid_campaign_name", "invalid_campaign_time", "invalid_campaign_start_time", "invalid_campaign_expired_time", "invalid_campaign_discount_type", "invalid_campaign_discount_value", "invalid_campaign_condition_type", "invalid_value", "invalid_theme_name", "invalid_label_name", "invalid_sku", "invalid_charge", "invalid_from", "invalid_to", "invalid_export_data_date_range", "invalid_secret_key", "invalid_auth_code", "invalid_terminal_id", "invalid_lang", "invalid_title", "invalid_content", "invalid_type", "invalid_legal_registration_no", "invalid_country", "invalid_publish_date", "invalid_json_format", "invalid_title_length", "invalid_name_length", "invalid_ref_type_length", "invalid_ref_id_length", "invalid_type_length", "invalid_desc_length", "invalid_key_length", "invalid_code_length", "invalid_legal_registration_no_length", "invalid_establishment_date_length", "invalid_country_length", "invalid_bank_code_length", "invalid_branch_code_length", "invalid_bank_account_number_length", "invalid_birthday_length", "invalid_email_length", "invalid_zip_length", "invalid_tel_length", "invalid_fax_length", "invalid_sort_order_length", "invalid_parking_rack_no", "invalid_parking_rack_status", "invalid_parking_rack_status_not_used", "invalid_parking_rack_status_opened", "invalid_parking_rack_status_locked", "invalid_parking_rack_status_connect_fail", "invalid_parking_no_or_rack_no", "invalid_parking_pin_code", "incorrect_currency", "incorrect_card_number", "incorrect_amount", "incorrect_merchant_id", "incorrect_product_id", "incorrect_export_data_date_range", "incorrect_status", "provider_response_result_failed", "no_such_token", "duplicate_order_no", "duplicate_shop_no", "duplicate_contract_number", "duplicate_email", "duplicate_legal_registration_no", "duplicate_key", "duplicate_category_name", "expired_card", "card_declined", "processing_card_error", "required_key", "charge_already_captured", "charge_already_refunded", "refused_refund", "refused_refund_constraint_day", "refused_refund_non_captured", "inactive_application", "inactive_payment_method", "inactive_product", "exist_payment_method", "campaign_already_started", "over_shop_limit_count", "over_product_limit_count", "process_error", "api_connection_error", "provider_config_error", "api_error", "forbidden", "forbidden_close_self", "recaptcha_fail"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"  # noqa: E501
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def message(self):
        """Gets the message of this ElepayError.  # noqa: E501

        エラーメッセージ  # noqa: E501

        :return: The message of this ElepayError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ElepayError.

        エラーメッセージ  # noqa: E501

        :param message: The message of this ElepayError.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElepayError):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
